{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/SkyGate/src/components/common/Breadcrumb.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Breadcrumb = () => {\n  _s();\n  const location = useLocation();\n\n  // Don't show breadcrumb on homepage\n  if (location.pathname === '/') {\n    return null;\n  }\n  const pathSegments = location.pathname.split('/').filter(segment => segment !== '');\n  const formatSegment = segment => {\n    // Convert kebab-case to title case\n    return segment.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n  const getSegmentPath = index => {\n    return '/' + pathSegments.slice(0, index + 1).join('/');\n  };\n  const getSegmentColor = segment => {\n    if (segment === 'logistics') return 'text-logistics-600 border-logistics-200';\n    if (segment === 'travel') return 'text-travel-600 border-travel-200';\n    return 'text-primary-600 border-primary-200';\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"bg-white/95 backdrop-blur-sm border-b border-gray-200 py-3 px-4 lg:px-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-premium\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2 text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"text-gray-500 hover:text-primary-600 transition-colors duration-300 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"w-4 h-4 mr-1\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), \"Home\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), pathSegments.map((segment, index) => {\n          const isLast = index === pathSegments.length - 1;\n          const segmentPath = getSegmentPath(index);\n          const segmentColor = getSegmentColor(segment);\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"w-4 h-4 text-gray-400\",\n              fill: \"none\",\n              stroke: \"currentColor\",\n              viewBox: \"0 0 24 24\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 2,\n                d: \"M9 5l7 7-7 7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), isLast ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `font-medium ${segmentColor}`,\n              children: formatSegment(segment)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Link, {\n              to: segmentPath,\n              className: `hover:underline transition-colors duration-300 ${segmentColor}`,\n              children: formatSegment(segment)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this)]\n          }, segment, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Breadcrumb, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = Breadcrumb;\nexport default Breadcrumb;\nvar _c;\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"names":["React","useLocation","Link","jsxDEV","_jsxDEV","Breadcrumb","_s","location","pathname","pathSegments","split","filter","segment","formatSegment","map","word","charAt","toUpperCase","slice","join","getSegmentPath","index","getSegmentColor","className","children","to","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","isLast","length","segmentPath","segmentColor","Fragment","_c","$RefreshReg$"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/SkyGate/src/components/common/Breadcrumb.jsx"],"sourcesContent":["import React from 'react';\nimport { useLocation, Link } from 'react-router-dom';\n\nconst Breadcrumb = () => {\n  const location = useLocation();\n  \n  // Don't show breadcrumb on homepage\n  if (location.pathname === '/') {\n    return null;\n  }\n\n  const pathSegments = location.pathname.split('/').filter(segment => segment !== '');\n  \n  const formatSegment = (segment) => {\n    // Convert kebab-case to title case\n    return segment\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const getSegmentPath = (index) => {\n    return '/' + pathSegments.slice(0, index + 1).join('/');\n  };\n\n  const getSegmentColor = (segment) => {\n    if (segment === 'logistics') return 'text-logistics-600 border-logistics-200';\n    if (segment === 'travel') return 'text-travel-600 border-travel-200';\n    return 'text-primary-600 border-primary-200';\n  };\n\n  return (\n    <nav className=\"bg-white/95 backdrop-blur-sm border-b border-gray-200 py-3 px-4 lg:px-8\">\n      <div className=\"container-premium\">\n        <div className=\"flex items-center space-x-2 text-sm\">\n          <Link \n            to=\"/\" \n            className=\"text-gray-500 hover:text-primary-600 transition-colors duration-300 flex items-center\"\n          >\n            <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\n            </svg>\n            Home\n          </Link>\n          \n          {pathSegments.map((segment, index) => {\n            const isLast = index === pathSegments.length - 1;\n            const segmentPath = getSegmentPath(index);\n            const segmentColor = getSegmentColor(segment);\n            \n            return (\n              <React.Fragment key={segment}>\n                <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n                \n                {isLast ? (\n                  <span className={`font-medium ${segmentColor}`}>\n                    {formatSegment(segment)}\n                  </span>\n                ) : (\n                  <Link \n                    to={segmentPath}\n                    className={`hover:underline transition-colors duration-300 ${segmentColor}`}\n                  >\n                    {formatSegment(segment)}\n                  </Link>\n                )}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}